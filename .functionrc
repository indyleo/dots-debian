# Easier Navigation
up() {
  local d=""
  local limit="$1"

  # Default to limit of 1
  if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
    limit=1
  fi

  for ((i=1;i<=limit;i++)); do
    d="../$d"
  done

  # perform cd. Show error if cd fails
  if ! cd "$d"; then
    echo "Couldn't go up $limit dirs.";
  fi
}

# Copy and go to the directory
cpg() {
	if [ -d "$2" ]; then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}

# Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}

# Create and go to the directory
mkdirg() {
	mkdir -p "$1"
	cd "$1"
}

# Better Pkg Manager 
if [ -f /usr/bin/apt ]; then
  apt() { 
    command nala "$@"
  }
  sudo() {
    if [ "$1" = "apt" ]; then
      shift
      command sudo nala "$@"
    else
      command sudo "$@"
    fi
  }
elif [ -f /usr/bin/pacman ]; then
  pac() {
    case "$1" in
      -S|-Syu|-Rns) command sudo pacman "$@" ;;
      "") command pacman -h ;;
      *) command pacman "$@" ;;
    esac
  }
else
  echo "No known package manager found"
fi

# Archive Extraction
extract() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: extract <archive_file>"
    return 1
  fi

  if [ -f "$1" ]; then
    case $1 in
      *.tar.bz2) tar xjf "$1"    ;;
      *.tar.gz)  tar xzf "$1"    ;;
      *.bz2)     bunzip2 "$1"    ;;
      *.rar)     unrar x "$1"    ;;
      *.gz)      gunzip "$1"     ;;
      *.tar)     tar xf "$1"     ;;
      *.tbz2)    tar xjf "$1"    ;;
      *.tgz)     tar xzf "$1"    ;;
      *.zip)     unzip "$1"      ;;
      *.Z)       uncompress "$1" ;;
      *.7z)      7z x "$1"       ;;
      *.deb)     ar x "$1"       ;;
      *.tar.xz)  tar xf "$1"     ;;
      *.tar.zst) unzstd "$1"     ;;
      *)         echo "'$1' cannot be extracted via extract" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Archiving
archive() {
  if [ -f "$1" ]; then
      if [ "$#" -lt 3 ]; then
          echo "Usage: archive <archive_name.tar.gz|archive_name.zip|archive_name.rar> <file1> <file2> ... <fileN>"
          return 1
      fi
      archive_name="$1"
      shift
      case "$archive_name" in
          *.tar.gz) tar -czf "$archive_name" "$@" ;;
          *.zip) zip -r "$archive_name" "$@" ;;
          *.rar) rar a "$archive_name" "$@" ;;
          *) echo "Error: Unsupported archive format. Supported formats are tar.gz, zip, and rar."
              return 1 ;;
      esac
      echo "Archive created: $archive_name"
  else
      echo "'$1' archive already exists"
  fi
}

# Be Lazy With Git
lazygall() {
	git add .
	git commit -m "$1"
	git push
}

lazygup() {
	git add -u
	git commit -m "$1"
	git push
}

# Lf CD
lfcd() {
    tmp="$(mktemp)"
    # `command` is needed in case `lfcd` is aliased to `lf`
    command lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        command rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
}

mkscript() {
  printf "File Name: "
  read -r ans
  file=$HOME/Scripts/$ans
  if [ -d "$HOME/Scripts" ]; then
    if [ -e "$HOME/Scripts/$ans" ]; then
      $EDITOR "$file"
    else
      echo "#!/bin/env bash" >> "$file"
      chmod a+x "$file"
      $EDITOR "$file"
    fi
  fi
}

# For Vim Users
# vim:ft=sh
