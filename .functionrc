# Easier Navigation
up() {
    local d=""
    local limit="$1"

    # Default to limit of 1
    if [ -z "$limit" ] || [ "$limit" -le 0 ]; then
        limit=1
    fi

    for ((i=1;i<=limit;i++)); do
        d="../$d"
    done

    # perform cd. Show error if cd fails
    if ! cd "$d"; then
        echo "Couldn't go up $limit dirs.";
    fi
}

# Copy and go to the directory
cpg() {
    if [ -d "$2" ]; then
        cp "$1" "$2" && cd "$2"
    else
        cp "$1" "$2"
    fi
}

# Move and go to the directory
mvg() {
    if [ -d "$2" ]; then
        mv "$1" "$2" && cd "$2"
    else
        mv "$1" "$2"
    fi
}

# Create and go to the directory
mkdirg() {
    mkdir -p "$1"
    cd "$1"
}

# Better Pkg Manager
if [ -f /usr/bin/apt ]; then
    apt() {
        command nala "$@"
    }
    sudo() {
        if [ "$1" = "apt" ]; then
            shift
            command sudo nala "$@"
        else
            command sudo "$@"
        fi
    }
elif [ -f /usr/bin/pacman ]; then
    pac() {
        case "$1" in
            -S|-Syu|-Rns) command sudo pacman "$@" ;;
            "") command pacman -h ;;
            *) command pacman "$@" ;;
        esac
    }
else
    echo "No known package manager found"
fi

# Archive Extraction
extract() {
    if [ "$#" -lt 1 ]; then
        echo "Usage: extract <archive_file>"
        return 1
    fi

    if [ -f "$1" ]; then
        case $1 in
            *.tar.bz2) tar xjf "$1"    ;;
            *.tar.gz)  tar xzf "$1"    ;;
            *.bz2)     bunzip2 "$1"    ;;
            *.rar)     unrar x "$1"    ;;
            *.gz)      gunzip "$1"     ;;
            *.tar)     tar xf "$1"     ;;
            *.tbz2)    tar xjf "$1"    ;;
            *.tgz)     tar xzf "$1"    ;;
            *.zip)     unzip "$1"      ;;
            *.Z)       uncompress "$1" ;;
            *.7z)      7z x "$1"       ;;
            *.deb)     ar x "$1"       ;;
            *.tar.xz)  tar xf "$1"     ;;
            *.tar.zst) unzstd "$1"     ;;
            *)         echo "'$1' cannot be extracted via extract" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Archiving
archive() {
    if [ "$#" -lt 2 ]; then
        echo "Usage: archive <archive_name.tar.gz|archive_name.zip|archive_name.rar> <file1> [file2 ... fileN]"
        return 1
    fi

    archive_name="$1"
    shift

    if [ -e "$archive_name" ]; then
        echo "Error: Archive '$archive_name' already exists."
        return 1
    fi

    case "$archive_name" in
        *.tar.gz)
            tar -czf "$archive_name" "$@"
            ;;
        *.zip)
            zip -r "$archive_name" "$@"
            ;;
        *.rar)
            if command -v rar > /dev/null; then
                rar a "$archive_name" "$@"
            else
                echo "Error: 'rar' command not found. Please install RAR to create .rar archives."
                return 1
            fi
            ;;
        *)
            echo "Error: Unsupported archive format. Supported formats are .tar.gz, .zip, and .rar."
            return 1
            ;;
    esac

    if [ $? -eq 0 ]; then
        echo "Success: Archive created: $archive_name"
    else
        echo "Error: Failed to create archive."
        return 1
    fi
}


# Be Lazy With Git
lazygall() {
    git add .
    git commit -m "$1"
    git push
}

lazygup() {
    git add -u
    git commit -m "$1"
    git push
}

# Lf CD
lfcd() {
    tmp="$(mktemp)"
    # `command` is needed in case `lfcd` is aliased to `lf`
    command lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        command rm -f "$tmp"
        if [ -d "$dir" ]; then
            if [ "$dir" != "$(pwd)" ]; then
                cd "$dir"
            fi
        fi
    fi
}

# YT Downloading
Get-YoutubeContent() {
    local url="$1"
    local type="$2"
    local output_folder="$HOME/Downloads"

    # Validate input
    if [[ -z "$url" || -z "$type" ]]; then
        echo "Usage: get_youtube_content <url> <type: aud|vid|bth>"
        return 1
    fi

    # Check if yt-dlp is installed
    if ! command -v yt-dlp &>/dev/null; then
        echo "yt-dlp is not installed. Please install yt-dlp and try again."
        return 1
    fi

    case "$type" in
        aud)
            yt-dlp -x --audio-format mp3 --embed-thumbnail --add-metadata --audio-quality 0 "$url" -o "$output_folder/%(title)s.%(ext)s"
            echo "Audio download completed. File saved in $output_folder."
            ;;
        vid)
            yt-dlp -f "bestvideo+bestaudio" --merge-output-format mp4 --embed-thumbnail --add-metadata "$url" -o "$output_folder/%(title)s.%(ext)s"
            echo "Video download completed. File saved in $output_folder."
            ;;
        bth)
            yt-dlp -f "bestvideo+bestaudio" --merge-output-format mp4 --embed-thumbnail --add-metadata "$url" -o "$output_folder/%(title)s.%(ext)s"
            echo "Combined audio and video download completed as an MP4. File saved in $output_folder."
            ;;
        *)
            echo "Invalid type specified. Use aud, vid, or bth."
            return 1
            ;;
    esac
}

# Spotdl Downloading
function Get-SpotifyContent() {
    local url="$1"
    local type="$2"
    local output_folder="$HOME/Downloads"

    if [[ -z "$url" || -z "$type" ]]; then
        echo "Usage: get_spotify_content <url> <type>"
        echo "Type options: -trk (track), -alb (album), -pl (playlist)"
        return 1
    fi

    if ! command -v spotdl &> /dev/null; then
        echo "spotdl is not installed. Please install spotdl and try again."
        return 1
    fi

    case "$type" in
        -trk|-alb|-pl)
            spotdl "$url" --output "$output_folder"
            echo "Download completed. Files saved in $output_folder."
            ;;
        *)
            echo "Invalid type. Use -trk for track, -alb for album, or -pl for playlist."
            return 1
            ;;
    esac
}

# For Vim Users
# vim:ft=zsh
